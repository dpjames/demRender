David James FinalProject

Usage:

./demRender -p DIRECTORY_NAME -z FLOAT -d POSITIVE_INT

-z defines the zscale for the elevation data. Usually this will be .001

-d defined the detail level. 1 is the highest detail and looks the best, but can be hard on the GPU
   setting this higher than 20 will lose the geometry of the landscape.
   5 is usually pretty good, but 1 really does look the best.

-p defines where within the resources directory to look for the land information.
   right now the only data I am submitting is for Yosemite NP (YOSEMITE_HD) and Mt Rainier NP. (RAINIER_LARGE)

Recommended runs:

./demRender -p YOSEMITE_HD -d 5 -z .001
./demRender -p RAINIER_LARGE -d 5 -z .001

It takes a second to load up, since the areas are pretty large and it calculates a lot of normals. Setting -d higher will reduce load times.
For this version of the project I modified the fauna to be instance rendered instead of every single item getting a draw call.
This has moved a TON of the computation to the GPU which fixed the CPU bottlenecks I was experiencing. 
These models are generated based on the actual landcover data from USGS. Right now only ~10 of the types are implemented, but
the infrastructure is in place to add the rest by simply creating the obj file. (The code looks in a specified folder (resources/LANDCOVER) for keys and values to generate the models)
Also I added coins placed at random around the map. Collect them all for something fun.
Have fun!

INPUT:

by default the mouse is captured when you mouse over. to release the mouse, left click. To regrab the mouse, left click again.
***Note, that if you aren't expecting it to grab the mouse the view could fly all over the place as you search for your mouse... if this happens just click.***

WASD - movement as expected
Space - unlock your y axis from the ground plane. (allow use of E and Q)
EQ - Move up(E) and down(q) along the y axis.

B/N - change the size of the entire scene. N to increase, B to decrease
R - reset to original view and size.
M - change the ground material... fun to see how the light changes as you move around
Z - turn on wireframe
X - turn off wireframe
   


Notes about cool things the program does:

Instanced rendering for most of the models - huge preformance boost.

util/tiffcon.cpp Takes in a mapping raster (DEM) in tif format (specifed as UINT32 data type). Then converts that file into a binary file of uint32_t tightly packed. 
   The format is: 32 bits for the width, 32 bits for the height and then, width * height * 32 bits for the elevation data. This allows full resolution elevation data!

The fauna is generated where it would really be in the world based on USGS landcover dataset.

The satallite imagery texture is MASSIVE. The original data was 15Gb per area. I obviously had to cut this down dramatically.

This program can read and display ANYWHERE in the US (or with the right data). It is not restricted to the example datasets I've supplied. I plan on creating a workflow to auto generate the data given a lat/lon. 
   It would be extra cool to generate the terrain as you walk dynamcally (chunk the terrain like minecraft, but pull it from a data server).


